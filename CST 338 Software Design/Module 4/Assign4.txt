/*
 * Assignment: Optical Barcode Readers and Writers
 * Names:      Brian Sheridan, Craig Calvert, Kevin Bentley, Samuel Pearce
 * Course:     CST338 - Spring B
 * Date:       04/01/2019
 * Objective:Create a tool that will read in barcodes and output their
 * message or take a massage and turn it into a barcode.
 */



public class Assign4
{
   public static void main(String[] args)
   {
      String[] sImageIn =
         {
               "                                               ",
               "                                               ",
               "                                               ",
               "     * * * * * * * * * * * * * * * * * * * * * ",
               "     *                                       * ",
               "     ****** **** ****** ******* ** *** *****   ",
               "     *     *    ****************************** ",
               "     * **    * *        **  *    * * *   *     ",
               "     *   *    *  *****    *   * *   *  **  *** ",
               "     *  **     * *** **   **  *    **  ***  *  ",
               "     ***  * **   **  *   ****    *  *  ** * ** ",
               "     *****  ***  *  * *   ** ** **  *   * *    ",
               "     ***************************************** ",
               "                                               ",
               "                                               ",
               "                                               "

         };

      String[] sImageIn_2 =
         {
               "                                          ",
               "                                          ",
               "* * * * * * * * * * * * * * * * * * *     ",
               "*                                    *    ",
               "**** *** **   ***** ****   *********      ",
               "* ************ ************ **********    ",
               "** *      *    *  * * *         * *       ",
               "***   *  *           * **    *      **    ",
               "* ** * *  *   * * * **  *   ***   ***     ",
               "* *           **    *****  *   **   **    ",
               "****  *  * *  * **  ** *   ** *  * *      ",
               "**************************************    ",
               "                                          ",
               "                                          ",
               "                                          ",
               "                                          "

         };
      String[] sImageIn_3 =
         {
               "                                      ",
               "                                      ",
               "* * * * * * * * * * * * * * * * * * * ",
               "*                                    *",
               "***** * ***** ****** ******* **** **  ",
               "* ************************************",
               "**  *    *  * * **    *    * *  *  *  ",
               "* *               *    **     **  *  *",
               "**  *   * * *  * ***  * ***  *        ",
               "**      **    * *    *     *    *  * *",
               "** *  * * **   *****  **  *    ** *** ",
               "**************************************",
               "                                      ",
               "                                      ",
               "                                      ",
               "                                      "

         };

      BarcodeImage bc = new BarcodeImage(sImageIn);
      DataMatrix dm = new DataMatrix(bc);

      // First secret message
      dm.translateImageToText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // second secret message
      bc = new BarcodeImage(sImageIn_2);
      dm.scan(bc);
      dm.translateImageToText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // third secret message
      bc = new BarcodeImage(sImageIn_3);
      dm.scan(bc);
      dm.translateImageToText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // create your own message
      dm.readText("What a great resume builder this is!");
      dm.generateImageFromText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // create your own message test compare
      dm.readText("CSUMB CSIT online program is top notch.");
      dm.generateImageFromText();
      dm.displayTextToConsole();
      dm.displayImageToConsole(); 
   }
}

// -------------------- Interface BarcodeIO --------------------
interface BarcodeIO
{
   /*
    * Accepts some image, represented as a BarcodeImage object to be described
    * below, and stores a copy of this image.  Depending on the sophistication
    * of the implementing class, the internally stored image might be an exact
    * clone of the parameter, or a refined, cleaned and processed image.
    * Technically, there is no requirement that an implementing class use a
    * BarcodeImage object internally, although we will do so.  For the basic
    * DataMatrix option, it will be an exact clone.  Also, no translation is
    * done here - i.e., any text string that might be part of an implementing
    * class is not touched, updated or defined during the scan.
    */
    public boolean scan(BarcodeImage bc);

   /*
    * Accepts a text string to be eventually encoded in an image. No translation
    * is done here - i.e., any BarcodeImage that might be part of an
    * implementing class is not touched, updated or defined during the reading
    * of the text.
    */
   public boolean readText(String text);

   /*
    * Not technically an I/O operation, this method looks at the internal text
    * stored in the implementing class and produces a companion BarcodeImage,
    * internally (or an image in whatever format the implementing class uses).
    * After this is called, we expect the implementing object to contain a
    * fully-defined image and text that are in agreement with each other.
    */
   public boolean generateImageFromText();

   /*
    * Not technically an I/O operation, this method looks at the internal image
    * stored in the implementing class, and produces a companion text string,
    * internally.  After this is called, we expect the implementing object to
    * contain a fully defined image and text that are in agreement with each
    * other.
    */
   public boolean translateImageToText();

   /*
    * Prints out the text string to the console.
    */
   public void displayTextToConsole();

   /*
    * Prints out the image to the console.  In our implementation, we will do
    * this in the form of a dot-matrix of blanks and asterisks.
    */
   public void displayImageToConsole();

}

// -------------------- Class BarcodeImage --------------------
class BarcodeImage implements Cloneable
{
   public static final int MAX_HEIGHT = 30;
   public static final int MAX_WIDTH = 65;
   private boolean[][] imageData;

   // Default constructor for BarcodeImage.
   public BarcodeImage()
   {
      imageData = new boolean[MAX_HEIGHT][MAX_WIDTH];

      // Sets all default values to false.
      for (int row = 0; row < imageData.length; row++)
      {
         for (int column = 0; column < imageData[row].length; column++)
         {
            imageData[row][column] = false;
         }
      }
   }

   // takes a 1D array of Strings and converts it to the internal 2D array of 
   // booleans.
   public BarcodeImage(String[] strData)
   {
      imageData = new boolean[MAX_HEIGHT][MAX_WIDTH];
      String stringCopy = "";

      for(int row = 0; row < strData.length; row++)
      {
         stringCopy = strData[row];
         for(int column = 0; column < stringCopy.length(); column++)
         {              
            if (stringCopy.charAt(column) == 42)
            {
               setPixel(row, column, true); 
            }
            else
            {
               setPixel(row, column, false); 
            }
         }
      }
   }

   // Get the pixel at the specified row and column
   public boolean getPixel(int row, int col)
   {
      return imageData[row][col];
   }

   /*
    * Set the pixel at the specified row and column to the specified value.
    * Returns true if successful, and false if the row/col is out of bounds.
    */
   public boolean setPixel(int row,int col, boolean value)
   {
      if(row < MAX_HEIGHT && col < MAX_WIDTH)
      {
         imageData[row][col] = value;
         return true;
      }
      return false;
   }

   /*
    * Displays the contents of the BarcodeImage in text to the console.
    */
   public void displayToConsole()  // optional
   {
      for(int r = 0; r < MAX_HEIGHT; r++)
      {
         for(int c = 0; c < MAX_WIDTH; c++)
         {
            if(imageData[r][c] == true)
            {
               System.out.print("*");
            }
            else
            {
               System.out.print(".");
            }    
         }
         System.out.println();
      }
   }

   /*
    * Makes a deep copy, implementing Cloneable
    */
   public BarcodeImage clone()
   {
      BarcodeImage clone = null;
      try
      {
         clone = (BarcodeImage) super.clone();
         clone.imageData = imageData.clone();
      }
      catch (CloneNotSupportedException e)
      {
         return null;
      }
      return clone;
   }
}

// -------------------- Class DataMatrix --------------------
class DataMatrix implements BarcodeIO
{
   public static final char BLACK_CHAR = '*';
   public static final char WHITE_CHAR = ' ';
   private BarcodeImage image;
   private String text;
   private int actualWidth;
   private int actualHeight;

   // Constructs an empty, but non-null, image and text value.
   public DataMatrix()
   {
       text = "";
       image = new BarcodeImage();
       actualWidth = 0;
       actualHeight = 0;
   }

   // Sets the image but leaves the text at its default value
   public DataMatrix(BarcodeImage image)
   {
      scan(image);
      
   }

   /*
    * Sets the text but leaves the image at its default value. Call readText()
    * and avoid duplication of code here.
    */
   public DataMatrix(String text)
   {
      readText(text);
   }

   /*
    * Implements BarcodeIO.readText(BarcodeImage image)
    */
   public boolean readText(String text)
   {
      clearImage();
      this.text = text;
      if(this.text != text)
      {
         return false;
      }
      return true;
   }

   /*
    * Implements BarcodeIO.scan(BarcodeImage image)
    */
   public boolean scan(BarcodeImage image)
   {
      this.image = image.clone();
      cleanImage();

      actualWidth = computeSignalWidth();
      actualHeight = computeSignalHeight();

      if(this.image == null)
      {
          return false;
      }
      return true; 
   }

   public int actualWidth()
   {
      return actualWidth;
   }

   public int actualHeight()
   {
      return actualHeight;
   }

   /*
    * Assuming that the image is correctly situated in the lower-left corner of
    * the larger boolean array, these methods use the "spine" of the array
    * (left and bottom BLACK) to determine the actual size.
    */
   private int computeSignalWidth()
   {
      int widthTrueCount = 0; 
      for(int column = 0; column < BarcodeImage.MAX_WIDTH; column++)
      {
         if(image.getPixel(BarcodeImage.MAX_HEIGHT - 1,column) == true)
         {
            widthTrueCount++;
         }
      }
      return widthTrueCount;
   }

   /*
    * Assuming that the image is correctly situated in the lower-left corner of
    * the larger boolean array, these methods use the "spine" of the array
    * (left and bottom BLACK) to determine the actual size.
    */
   private int computeSignalHeight()
   {
      int heightTrueCount = 0; 
      for(int row = 0; row < BarcodeImage.MAX_HEIGHT; row++)
      {
         if(image.getPixel(row,0) == true)
         {
            heightTrueCount++;
         }
      }
      return heightTrueCount;  
   }

   /*
    * Implements BarcodeIO.generateImageFromText(BarcodeImage image)
    */
   public boolean generateImageFromText()
   {
      clearImage();
      for(int column = 1; column < text.length() + 3; column++)
      {
         for(int row = 10; row > 0; row--)
         {
            if(row == 10 || column == 1 || column %2 != 0 && row == 1 || 
                  column == (text.length() + 2) && row%2 == 0)
            {
               image.setPixel(row,column,true);
            }
         }
      }  
      scan(image);  
      boolean complete = true;  
      for(int col = 1; col <  text.length() + 1; col++)
      {
        if(!WriteCharToCol(col, ((int) text.charAt(col - 1))))
            complete = false;
      }
      return complete;
   }

   /*
    * Implements BarcodeIO.translateImageToText(BarcodeImage image)
    */
   public boolean translateImageToText()
   {
      int counting[] = new int[actualHeight];
      text = "";
      for(int column = 0; column < actualWidth; column++)
      {
         for(int row = (BarcodeImage.MAX_HEIGHT - 2), countIndex = 0; row >
         ((BarcodeImage.MAX_HEIGHT - 2) - actualHeight); row--, countIndex++)
         {
            if(image.getPixel(row,column) == true)
            {    
               counting[countIndex] =  2;
            }
            else
            {
               counting[countIndex] =  0;
            }
         }
         countRowTotal(counting);
      }
      if(text.length() == 0)
      {
         return false;
      }
      return true;
   }  

   // Returns the total number of rows
   private void countRowTotal(int[] counting)
   {    
      if(counting[actualHeight - 3] != 2)
      {
         int countingTotal = 0;
         for(int index = 0; index < actualHeight - 2; index++)
         {
            if(index == 0 && counting[index] == 2)
            {
               countingTotal += 1;
            }
            else if(index != 0)
            {
               countingTotal += Math.pow(counting[index], index);
            }    
         }

         text += readCharFromCol(countingTotal);     
      }
   }

   /*
    * Implements BarcodeIO.translateImageToText(BarcodeImage image)
    */
   public void displayTextToConsole()
   {
      System.out.println(text);
   }

   /*
    * Prints the barcode with borders
    */
   public void displayImageToConsole()
   {
      for(int topBoarder = 0; topBoarder < actualWidth + 2; topBoarder++)
      {
         System.out.print("-");

      }
      System.out.println();
      for(int r = (BarcodeImage.MAX_HEIGHT - actualHeight) ;
            r < BarcodeImage.MAX_HEIGHT; r++)
      {
         System.out.print("|");
         for(int c = 0; c < actualWidth; c++)
         {
            if(image.getPixel(r,c) == true)
            {
               System.out.print(BLACK_CHAR);
            }
            else
            {
               System.out.print(WHITE_CHAR);
            }
         }
         System.out.print("|");
         System.out.println();
      }   
   }

   /*
    * This private method will make no assumption about the placement of the 
    * "signal" within a passed-in BarcodeImage.  In other words, the incoming
    * BarcodeImage may not be lower-left justified.
    */
   private void cleanImage()
   {
      int colunmStart = 0;
      int rowStart = 0;
      boolean breakFlag = false;
      for(int column = 0; column < BarcodeImage.MAX_WIDTH; column++)
      {
         if(breakFlag == true)
         {
            break;
         }
         for(int row = BarcodeImage.MAX_HEIGHT - 1; row > 0; row--)
         {
            if(image.getPixel(row, column) == true)
            {
               colunmStart = column;
               rowStart = (BarcodeImage.MAX_HEIGHT - 1) - row;
               breakFlag = true;
               break;
            }    
         }
      }
      moveImageToLowerLeft(rowStart, colunmStart);
   }

   private void moveImageToLowerLeft(int startRow, int startColumn)
   {
      for(int column = 0; column < 
            BarcodeImage.MAX_WIDTH - startColumn; column++)
      {
         for(int row = 29; row > 0 + startRow; row--)
         {
            image.setPixel(row, column, image.getPixel((row - startRow), 
                  (column + startColumn)));
            image.setPixel((row - startRow), (column + startColumn),false);
         }
      }
   }

   private char readCharFromCol(int col)
   {
      return (char) col;
   }

   private boolean WriteCharToCol(int col, int code)
   {
      if(col < 0 || col > (BarcodeImage.MAX_WIDTH-1))
          return false;
         
      int[] container = new int[8];
      int next = 0;
      while (code > 0 )
      {
         container[next] = code%2;
         next++;
         code = code / 2;
      }

      for(int i = 0, row = (BarcodeImage.MAX_HEIGHT - 2); 
            i < container.length; row--, i++)
      {
         if(container[i] == 1)
         {
            image.setPixel(row,col,true);
         }
         else
         {
            image.setPixel(row,col,false);
         }
      }
      return true;
   }

   private void clearImage() // optional [MAX_HEIGHT][MAX_WIDTH]
   {

      for (int row = 0; row < BarcodeImage.MAX_HEIGHT; row++)
      {
         for (int column = 0; column < BarcodeImage.MAX_WIDTH; column++)
         {
            image.setPixel(row,column,false);
         }
      }
   }
}
